{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mOC4CzBC,wNAlCX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,KANF,WAQEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,KACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,MAIFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,QAAtB,aADF,YAEeH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,MAFf,YAGEH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,QAAtB,QAHF,YAIeH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,MAJf,YAKEH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,QAAtB,QALF,YAMeH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,MANf,YAOEH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,QAAtB,YAPF,YAQeH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,MARf,YASEH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,QAAtB,kBA5BIE,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8215f56f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './styles/common/app.css';\nimport './styles/desktops/app.css';\nimport './styles/mobile/app.css';\nimport './styles/tablet/app.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'reactstrap';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='main-cont'>\n            <div className='row cen name-cont'>\n              <span className=\"name\">V</span> \n              <span className=\"name\">i</span> \n              <span className=\"name\">k</span>\n              <span className=\"name\">r</span> \n              <span className=\"name\">a</span> \n              <span className=\"name\">m</span>\n                &nbsp;&nbsp;\n              <span className=\"name lName\">B</span> \n              <span className=\"name lName\">e</span> \n              <span className=\"name lName\">l</span>\n              {/* <span className=\"name lName\">d</span> \n              <span className=\"name lName\">e</span>   */}\n            </div>\n            <div className='cen links-cont'>\n              <a href=\"#\" className=\"link\">Portfolio</a> \n              &nbsp;&nbsp; <span className='link-seperator'>| </span> &nbsp;&nbsp;\n              <a href=\"#\" className=\"link\">Blog</a> \n              &nbsp;&nbsp; <span className='link-seperator'>| </span> &nbsp;&nbsp;\n              <a href=\"#\" className=\"link\">Apps</a> \n              &nbsp;&nbsp; <span className='link-seperator'>| </span> &nbsp;&nbsp;\n              <a href=\"#\" className=\"link\">LinkedIn</a>\n              &nbsp;&nbsp; <span className='link-seperator'>| </span> &nbsp;&nbsp;\n              <a href=\"#\" className=\"link\">Code</a>\n            </div>\n        </div> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}